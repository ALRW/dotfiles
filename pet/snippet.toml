[[snippets]]
  description = "[RMQ] Add a new RabbitMQ user"
  command = "rabbitmqctl add_user <user> <pw>"
  output = ""

[[snippets]]
  description = "[RMQ] Create a new RabbitMQ admin user with full permissions"
  command = "rabbitmqctl add_user <user> <password> && rabbitmqctl set_user <user> administrator && rabbitmqctl set_permissions -p / <user> \".*\" \".*\" \".*\""
  output = ""

[[snippets]]
  description = "[RMQ] Make a RabbitMQ virtual host and set permissions"
  command = "rabbitmqctl add_vhost <vhost-name=Some_Virtual_Host> && rabbitmqctl set_permissions -p  <vhost-name=Some_Virtual_Host> <user=guest> \".*\" \".*\" \".*\""
  output = ""

[[snippets]]
  description = "[RMQ] Create a RabbitMQ exchange"
  command = "rabbitmqadmin declare exchange --vhost=<vhost-name=Some_Virtual_Host> name=<exchange-name=some_exchange> type=direct"
  output = ""

[[snippets]]
  description = "[RMQ] Create a RabbitMQ queue"
  command = "rabbitmqadmin declare queue --vhost=<vhost-name=Some_Virtual_Host> name=<queue-name=some_outgoing_queue> durable=true"
  output = ""

[[snippets]]
  description = "[RMQ] Publish a message to a rabbitmq exchange"
  command = "rabbitmqadmin --vhost=<vhost-name=Some_Virtual_Host> publish exchange=<exchange=some_exchange> routing_key=<routing-key=some_routing_key> payload=<payload=\"Hello world\">"
  output = ""

[[snippets]]
  description = "[RMQ] Bind a queue to an exchange"
  command = "rabbitmqadmin --vhost=<vhost-name=Some_Virtual_Host> declare binding source=<exchange-name=some_exchange> destination_type=queue destination=<queue-name=some_outgoing_queue> routing_key=<routing-key=some_routing_key>"
  output = ""

[[snippets]]
  description = "[RMQ] List the RabbitMQ queues present on a particular virtual host"
  command = "rabbitmqctl --vhost=<vhost-name=Some_Virtual_Host> list_queues"
  output = ""

[[snippets]]
  description = "[RMQ] List items held on a particular RabbitMQ queue"
  command = "rabbitmqadmin --vhost=<vhost-name=Some_Virtual_Host> get queue=<queue-name=some_outgoing_queue> count=<how-many-items=3>"
  output = ""

[[snippets]]
  description = "[RMQ] Delete a RabbitMQ queue on a particular vhost"
  command = "rabbitmqadmin --vhost=<vhost-name=Some_Virtual_Host> delete queue name=<queue-name=some_incoming_queue>"
  output = ""

[[snippets]]
  description = "Find and kill a running process"
  command = "ps -ef | grep <process-to-kill> | grep -v grep | awk '{print $2}' | xargs kill -9"
  output = ""

[[snippets]]
  description = "[awk] output non-empty lines from a file; remove any lines that contain a particular pattern; sum the values in columns; print the totals"
  command = "grep . <filename> | grep -v '<remove-lines-with-pattern>' | awk '{s+=<column-to-variable=$3>; r+=<other-column-to-variable=$5>} END {print s; print r}'"
  output = ""

[[snippets]]
  description = "[macos] Restart video utilities on OS X (for when camera is on but video is black)"
  command = "sudo killall VDCAssistant && sudo killall AppleCameraAssistant"
  output = ""

[[snippets]]
  description = "[screen] Add a meaningful name to the screen session"
  command = "screen -S <session-name=SCREEN_NAME>"
  output = ""

[[snippets]]
  description = "[screen] Get the <pid>.<session-name> for the current session with controlling terminal and copy to clipboard"
  command = "screen -ls | grep Attached | cut -f2 | perl -pe 'chomp' | pbcopy"
  output = ""

[[snippets]]
  description = "[screen] Send a specified command to the running screen instance (in this case wait for input to be sent from vim-slime)"
  command = "screen -X eval <command=\"msgwait 0\">"
  output = ""

[[snippets]]
  description = "Run defrost for csv list of topics"
  command = "sudo docker run -ti quay.io/fundingcircle/defrost /configure-and-start.sh -t allocation-settings-updated,bilcas-available-balance-updated,funding-channel-failed-allocation,funding-channel-failed-concentration-v3,funding-channel-failed-eligibility-v2,funding-channel-passed-concentration-v3,funding-channel-passed-eligibility-v2,funding-channel-rule-tested,funding-channel-updated,funding-channel-updated-v3,funding-channels,listing-allocated,listing-cancelled,listing-created-v2,listing-randomly-allocated-to-funding-channel,product-created,product-unit-payment-made,product-unit-traded"
  output = ""

[[snippets]]
  description = "[repl] Copy screen PID to clipboard, set screen session to evaluate input and open a new repl"
  command = "screen -ls | grep Attached | cut -f2 | pbcopy && screen -X eval <command=\"msgwait 0\"> && lein repl"
  output = ""

[[snippets]]
  description = "[vault] setup a relatively insecure vault server for local development"
  command = "vault server -dev"
  output = ""

[[snippets]]
  description = "[vault] enable the transit secrets engine for vault"
  command = "vault secrets enable transit"
  output = ""

[[snippets]]
  description = "[vault] Create an transit encryption key-ring"
  command = "vault write -f transit/keys/<encryption-key-ring=key>"
  output = ""

[[snippets]]
  description = "[RMQ] show available queues"
  command = "rabbitmqadmin list queues"
  output = ""

[[snippets]]
  description = "[RMQ] show available exchanges"
  command = "rabbitmqadmin list exchanges"
  output = ""

[[snippets]]
  description = "[Kafka] Consume from the beginning of a particular Avro encoded topic"
  command = "kafka-avro-console-consumer --bootstrap-server <bootstrap-server=kafka.service.consul>:9092 --property schema.registry.url=<schema-registry=http://schema-registry.service.consul> --topic <topic=loan-application-transformed-v2> --from-beginning --property key.deserializer=org.apache.kafka.common.serialization.StringDeserializer --property print.key=true"
  output = ""

[[snippets]]
  description = "[Docker] Run an image -> terminal (open pseudo TTY/keep stdin open)"
  command = "sudo docker run -it <image=quay.io/fundingcircle/ops-scripts:latest>"
  output = ""

[[snippets]]
  description = "[Kafka] List kafka topics"
  command = "kafka-topics --zookeeper <zookeeper=localhost>:2181 --list"
  output = ""

[[snippets]]
  description = "[Kafka] Delete a topic"
  command = "kafka-topics --zookeeper <zookeeper=localhost>:2181 --delete --topic <topic-name>"
  output = ""

[[snippets]]
  description = "[Kafka] Create a new topic"
  command = "kafka-topics --create --zookeeper <zookeeper=localhost>:2181 --replication-factor <replication-factor=3> --partitions <partitions=15> --topic <topic_name>"
  output = ""

[[snippets]]
  description = "[clasp] create a new google app script"
  command = "clasp create <new-script-title>"
  output = ""

[[snippets]]
  description = "[clasp] clone an existing app script project into the current directory"
  command = "clasp clone <scriptId>"
  output = ""

[[snippets]]
  description = "[clasp] creates an immutable version of the script that can be deployed"
  command = "clasp version <description>"
  output = ""

[[snippets]]
  description = "[clasp] deploy a version of your script to Gsuite"
  command = "clasp deploy <version> <description>"
  output = ""

[[snippets]]
  description = "[clasp] undeploy the selected script"
  command = "clasp undeploy <deploymentId>"
  output = ""

[[snippets]]
  description = "[clasp] updates an existing deployment with a new version and description"
  command = "clasp redeploy <deploymentId> <version> <description>"
  output = ""

[[snippets]]
  description = "[clasp] opens the script in the Apps Scripts editor (editor is launched as a new tab in the default browser)"
  command = "clasp open"
  output = ""

[[snippets]]
  description = "[warp] Create new warp"
  command = "warp open <name>"
  output = ""

[[snippets]]
  description = "[warp] connect to a warp"
  command = "warp connect <name>"
  output = ""

[[snippets]]
  description = "[warp] from inside a warp retreive the list of connected users"
  command = "warp state"
  output = ""

[[snippets]]
  description = "[warp] give write access to a warp user"
  command = "warp authorize <username>"
  output = ""

[[snippets]]
  description = "[warp] revoke write access to a warp user"
  command = "warp revoke <username>"
  output = ""

[[snippets]]
  description = "[clojure] check for outdated dependencies in a project using deps.edn"
  command = "clojure -Sdeps '{:deps {olical/depot {:mvn/version \"1.5.0\"}}}' -m depot.outdated.main"
  output = ""

[[snippets]]
  description = "[Kafka] produce messages to an avro encoded topic with a specific schema"
  command = "kafka-avro-console-producer --broker-list <broker-list-host:port=localhost:9092> --topic <topic-name=loan-application-submitted> --property schema.registry.url=<schema-registry-url=http://localhost:8081> --property value.schema=<your-schema>"
  output = ""

[[snippets]]
  description = "[RMQ] list queues on remote exchange"
  command = "rabbitmqadmin --host=<host=\"$RABBITMQ_HOST\"> --port=443 --ssl --vhost=<vhost=\"$RABBITMQ_VHOST\"> --username=<username=\"$RABBITMQ_USERNAME\"> --password=<password=\"$RABBITMQ_PASSWORD\"> list queues"
  output = ""

[[snippets]]
  description = "[RMQ] pull message from a remote queue non-destructively"
  command = "rabbitmqadmin --host=\"$RABBITMQ_HOST\" --port=443 --ssl --vhost=\"$RABBITMQ_VHOST\" --username=\"$RABBITMQ_USERNAME\" --password=\"$RABBITMQ_PASSWORD\" get queue=<queue-name> requeue=<requeue=true> count=<count=1>"
  output = ""

[[snippets]]
  description = "[Kafka] Get max offset for topic and partitions"
  command = "kafka-run-class kafka.tools.GetOffsetShell --broker-list <broker-list=kafka.service.consul>:9092 --topic <topic>"
  output = ""

[[snippets]]
  description = "[Kafka] consume a messages for a particular topic from a given offset on a given partition"
  command = "kafka-console-consumer --bootstrap-server <bootstrap-server=kafka.service.consul>:9092 --topic <topic> --offset <offset> --partition <partition>"
  output = ""

[[snippets]]
  description = "[curl] pull site and search for emails"
  command = "curl -v --silent <site> 2>&1 | grep -i -o '[A-Z0-9._%+-]\\+@[A-Z0-9.-]\\+\\.[A-Z]\\{2,4\\}'"
  output = ""

[[snippets]]
  description = "[MacOS] set the KeyRepeat variable to 1 for faster key-repeat"
  command = "defaults write NSGlobalDomain KeyRepeat -int 1"
  output = ""
