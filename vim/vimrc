"PLUGINS
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

" COLORSCHEME
set background=dark
colorscheme PerfectDark


" Map Ctrl n to open NerdTree
map <leader>n :NERDTreeToggle<CR>

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" Opens silver searcher in vim for easy searching
nnoremap <leader>a :Ag
" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" maps leader-t to show tagbar
nmap <leader>t :TagbarToggle<CR>

" CONFIG
" show line numbers
set number
set numberwidth=5
" highlight which line the cursor is on
set cursorline
" load filetype specific indent files
filetype indent plugin on
" visual autocomplete for command menu
set wildmenu
" redraw only when needed
set lazyredraw
" highlights matching parentheses
set showmatch
" search as characters are entered, highlight matches, ignore case except when using capitals
set incsearch
set hlsearch
set ignorecase
set smartcase
" enable syntax highlighting if the terminal has colors
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif
" Allow backspacing over autoindent, line breaks and start of insert auto-correction
set backspace=indent,eol,start
" When opening a new line and no filetype-specific indenting is enables, keep the same indent as the line you're currently on.
set autoindent
" Use visualbell instead of beeping when dong something wrong
set visualbell
" enable the use of the mouse for all modes
set mouse=a
" Automatically write before running a command
set autowrite

" SPACES AND TABS
" number of visual spaces per tab
set tabstop=2
" converts tabs to spaces
set expandtab
" display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·
" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

" MOVEMENT
" move vertically by visual line
nnoremap j gj
nnoremap k gk
" move to beginning and end of line
nnoremap E $
nnoremap B 0
" highlight the last text that was inserted
nnoremap gV `[v`]
" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" LEADER SHORTCUTS
let mapleader=" "
" use jk to exit insert mode and write changes
inoremap jk <esc>:w<Enter>
" Switch between the last two files
nnoremap <leader><leader> <c-^>
