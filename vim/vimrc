if filereadable(expand("~/.vimrc.bundles"))
        source ~/.vimrc.bundles
endif

" COLORSCHEME
set background=dark
syntax enable
colorscheme darcula

" The Silver Searcher
if executable('ag')
        " Use ag over grep
        set grepprg=ag\ --nogroup\ --nocolor

        " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
        let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

        " ag is fast enough that CtrlP doesn't need to cache
        let g:ctrlp_use_caching = 0
endif

" LEADER SHORTCUTS
let mapleader=","

" use jk to exit insert mode and write changes
" use jj to simply <esc>
inoremap jk <esc>:w<Enter>
inoremap jj <esc>

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Map Leader n to open NerdTree
map <leader>n :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Opens silver searcher in vim for easy searching
nnoremap <leader>a :Ag

" Quickly edit and source vimrc
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" Highlight a column when over 80 chars
if exists('+colorcolumn')
  set colorcolumn=80
else
  au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" maps leader-t to show tagbar
nmap <leader>t :TagbarToggle<CR>

" CONFIG
" show line numbers
set number
set numberwidth=5

" highlight which line the cursor is on
set cursorline
" visual autocomplete for command menu
set wildmenu
" redraw only when needed
set lazyredraw
" highlights matching parentheses
set showmatch

" search as characters are entered, highlight matches, ignore case except when using capitals
set incsearch
set hlsearch
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert auto-correction
set backspace=indent,eol,start
" When opening a new line and no filetype-specific indenting is enables, keep the same indent as the line you're currently on.
set autoindent
" Use visualbell instead of beeping when dong something wrong
set visualbell
" enable the use of the mouse for all modes
set mouse=a
" Automatically write before running a command
set autowrite
" enable paste with Ctrl v 
set pastetoggle=<F10>
inoremap <C-v> <F10><C-r>+<F10>
" enable yanking visual selection yanking using Ctrl-C
vnoremap <C-c> "+y
" leader l redraws the screen and removes any search highlighting
nnoremap <leader>l :nohl<CR><C-l>

" SPACES AND TABS
" number of visual spaces per tab
set tabstop=2
" converts tabs to spaces
set expandtab
" display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·
" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmode=list:longest,list:full
function! InsertTabWrapper()
        let col = col('.') - 1
        if !col || getline('.')[col - 1] !~ '\k'
                return "\<tab>"
        else
                return "\<c-p>"
        endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

" MOVEMENT
" move vertically by visual line
nnoremap j gj
nnoremap k gk
" move to beginning and end of line
nnoremap E $
nnoremap B 0
" highlight the last text that was inserted
nnoremap gV `[v`]
" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" enable flow types for vim javascript
let g:javascript_plugin_flow = 1

" don't restrict jsx syntax highlighting to .jsx files
let g:jsx_ext_required = 0

" Emmet Configuration
let g:user_emmet_settings = {
  \ 'javascript.jsx' : {
    \ 'extends' : 'jsx',
  \},
\}

" ALE tweaks for syntax highlighting
let g:ale_sign_error = '●' " Less aggressive than the default '>>'
let g:ale_sign_warning = '.'
let g:ale_lint_on_enter = 0 " Less distracting when opening a new file
let g:ale_linter_aliases = {'javascript.jsx': 'javascript', 'jsx': 'javascript'}
let g:ale_linters = {'javascript': ['eslint']}

" Tern/YouCompleteMe leader mappings
nnoremap <leader>d :YcmCompleter GoToDefinition<CR>
nnoremap <leader>t :YcmCompleter GetType<CR>
nnoremap <leader>D :YcmCompleter GetDoc<CR>
nnoremap <leader>p :YcmCompleter GoToReferences<CR>
nnoremap <leader>r :YcmCompleter RefactorRename<CR>

" Toggle Rainbow parens
let g:rainbow_active = 0
nnoremap <leader>R :RainbowToggle<CR>
" cycle through grep results easily
nmap <silent> <C-N> :cn<CR>zv
nmap <silent> <C-M> :cp<CR>zv

" Vim hardtime: to stop me from just holding down the j and k keys
let g:hardtime_default_on = 1
nmap <leader>h :HardTimeToggle<CR>

" load filetype specific indent files
filetype indent plugin on

" local file indent for Javascript
autocmd Filetype javascript setlocal ts=2 sw=2 expandtab
autocmd Filetype ruby setlocal ts=2 sw=2 expandtab
autocmd Filetype html setlocal ts=2 sw=2 expandtab
autocmd Filetype json setlocal ts=2 sw=2 expandtab
