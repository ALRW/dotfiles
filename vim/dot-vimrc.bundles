if &compatible
  set nocompatible
end

" Shim command and function to allow migration from Vundle to vim-plug.
function! VundleToPlug(vundle_command, arg, ...)
  echom "You are using Vundle's `".a:vundle_command."` command to declare plugins. Dotfiles now uses vim-plug for plugin management. Please rename uses of `".a:vundle_command."` to `Plug`. Plugin was '".a:arg."'."
  let vim_plug_options = {}

  if a:0 > 0
    if has_key(a:1, 'name')
      let name = a:1.name
      let vim_plug_options.dir = "$HOME/.vim/bundle/".a:1.name
    endif

    if has_key(a:1, 'rtp')
      let vim_plug_options.rtp = a:1.rtp
    endif
  endif

  Plug a:arg, vim_plug_options
endfunction

" Function to complete YCM installation
function! BuildYCM(info)
  " info is a dictionary with 3 fields
  " - name:   name of the plugin
  " - status: 'installed', 'updated', or 'unchanged'
  " - force:  set on PlugInstall! or PlugUpdate!
  if a:info.status == 'installed' || a:info.force
    !./install.py --js-completer
  endif
endfunction

com! -nargs=+  -bar Plugin call VundleToPlug("Plugin", <args>)
com! -nargs=+  -bar Bundle call VundleToPlug("Bundle", <args>)

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

" Define bundles via Github repos
" Movement plugins
Plug 'justinmk/vim-sneak'
Plug 'easymotion/vim-easymotion'
" Smooth scrolling
Plug 'psliwka/vim-smoothie'
" Moving visually selected elements via Ctrl + mv key
Plug 'Jorengarenar/vim-MvVis'
" Custom startup screen
Plug 'mhinz/vim-startify'
" Shortcuts to test from within Vim
Plug 'vim-test/vim-test'
" Language linting and analysis
Plug 'dense-analysis/ale'
Plug 'sheerun/vim-polyglot'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
" FZF should speak for itself!
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" Sensible repetition, surrounding status-line, colors and comments
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'vim-scripts/tComment'
Plug 'itchyny/lightline.vim'
Plug 'blueshirts/darcula'
" Auto close parentheses and do blocks
Plug 'cohama/lexima.vim'
" Brings emmet to vim
Plug 'mattn/emmet-vim'
" Embed a repl in vim and provide easy methods to send code
Plug 'sillybun/vim-repl'
" Tree view sidebar and icons for different filetype
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle'}
Plug 'ryanoasis/vim-devicons'
" Clojure/Lisp plugins for sensible defaults
Plug 'guns/vim-sexp', { 'for': 'clojure' }
Plug 'tpope/vim-sexp-mappings-for-regular-people', { 'for': 'clojure' }

if filereadable(expand("~/.vimrc.bundles.local"))
  source ~/.vimrc.bundles.local
endif

call plug#end()
