if filereadable(expand("~/.vimrc.bundles"))
        source ~/.vimrc.bundles
endif

" COLORSCHEME
set background=dark
syntax enable
colorscheme darcula
set encoding=UTF-8

" The Silver Searcher
if executable('ag')
        " Use ag over grep
        set grepprg=ag\ --nogroup\ --nocolor

        " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
        let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

        " ag is fast enough that CtrlP doesn't need to cache
        let g:ctrlp_use_caching = 0
endif

" LEADER SHORTCUTS
let mapleader=","

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Map Leader n to open NerdTree
map <leader>n :NERDTreeToggle<CR>

nnoremap <leader>a :Ag<CR>

" Opens file search using fzf
nnoremap <leader>f :Files<CR>

" Opens tags to search using fzf
nnoremap <leader>t :Tags<CR>

" Searches tags in buffer using fzf
nnoremap <leader>T :BTags<CR>

" Quickly open a vertical split
nnoremap <leader>v :vsp<CR>

" Quickly edit and source vimrc
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>eb :e ~/.vimrc.bundles<CR>
nmap <silent> <leader>ec :e ~/.vimrc.coc<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" use jk to exit insert mode and write changes
" use jj to simply <esc>
inoremap jk <esc>:w<Enter>
inoremap jj <esc>

" Opens silver searcher in vim for easy searching
command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, '--color-path="0;33"', <bang>0)

"Setting up auto-save
:au FocusLost * :wa
set autowrite
set autoread

" Highlight a column when over 80 chars
if exists('+colorcolumn')
        set colorcolumn=80
else
        au BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
endif

" CONFIG
" show line numbers
set number
set numberwidth=5

" keep some context visible when moving up and down pages
set scrolloff=10

" highlight which line the cursor is on
set cursorline
" visual autocomplete for command menu
set wildmenu
" redraw only when needed
set lazyredraw
" highlights matching parentheses
set showmatch

" buffers are hidden with unsaved changes rather than forcing you to write
set hidden

" COQ LANGUAGE SERVER CONFIG
if filereadable(expand("~/.vimrc.coc"))
        source ~/.vimrc.coc
endif

" " Add diagnostic info for https://github.com/itchyny/lightline.vim
function! CocCurrentFunction()
    return get(b:, 'coc_current_function', '')
endfunction

let g:lightline = {
                        \ 'colorscheme': 'wombat',
                        \ 'active': {
                        \   'left': [ [ 'mode', 'paste' ],
                        \             [ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ] ]
                        \ },
                        \ 'component_function': {
                        \   'cocstatus': 'coc#status',
                        \   'currentfunction': 'CocCurrentFunction'
                        \ },
                        \ }

" search as characters are entered, highlight matches, ignore case except when using capitals
set incsearch
set hlsearch
set ignorecase
set smartcase

" Allow backspacing over autoindent, line breaks and start of insert auto-correction
set backspace=indent,eol,start
" When opening a new line and no filetype-specific indenting is enables, keep the same indent as the line you're currently on.
set autoindent
" Use visualbell instead of beeping when dong something wrong
set visualbell
" enable the use of the mouse for all modes
set mouse=a
" Automatically write before running a command
set autowrite
" enable paste with Ctrl v 
set pastetoggle=<F10>
inoremap <C-v> <F10><C-r>+<F10>
" enable yanking visual selection yanking using Ctrl-C
vnoremap <C-c> "+y
" leader l redraws the screen and removes any search highlighting
nnoremap <leader>l :nohl<CR><C-l>

" SPACES AND TABS
" number of visual spaces per tab
set tabstop=2
set shiftwidth=2
" converts tabs to spaces
set expandtab
" display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" MOVEMENT
" move vertically by visual line
nnoremap j gj
nnoremap k gk

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Set sane defaults for splits
set splitbelow
set splitright

" terminal movement
tnoremap <C-j> <C-w>j
tnoremap <C-k> <C-w>k
tnoremap <C-h> <C-w>h
tnoremap <C-l> <C-w>l
" close terminal window
tnoremap <C-d> <C-\><C-n>:q!<CR>

" Emmet Configuration
let g:user_emmet_leader_key='<C-Z>'
let g:user_emmet_settings = {
                        \ 'javascript.jsx' : {
                        \ 'extends' : 'jsx',
                        \},
                        \}

" ALE tweaks for syntax highlighting
let g:ale_sign_error = '❌'
let g:ale_sign_warning = '⚠️'
" Less distracting when opening a new file
let g:ale_lint_on_enter = 0
let g:ale_fixers = {'javascript': ['eslint']}
" Fix files automatically on save
let g:ale_fix_on_save = 1

" vim-repl config
let g:repl_program = {
      \  'clojure': ['clojure'],
      \  'javascript': ['node'],
      \  'ruby': ['irb', 'pry'],
      \  'typescript': ['ts-node', 'node'],
      \  'scala': ['amm', 'scala'],
      \}
nnoremap <leader>r :REPLToggle<Cr>
let g:repl_position = 3

" vim-sneak label mode
let g:sneak#label = 1
map <leader>s <Plug>Sneak_s
map <leader>S <Plug>Sneak_S

" vim-test shortcuts
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ts :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tv :TestVisit<CR>

" vim-easymotion shortcuts
map <leader> <Plug>(easymotion-prefix)
" <Leader>f{char} to move to {char}
nmap <space>f <Plug>(easymotion-overwin-f)
" Move to line
nmap <space>L <Plug>(easymotion-overwin-line)
" Move to word
nmap <space>w <Plug>(easymotion-overwin-w)
